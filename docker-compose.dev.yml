# SSL Monitor Pro - Development Docker Compose Configuration
# This file is optimized for local development with hot reloading and debugging

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: sslmonitor-postgres-dev
    environment:
      POSTGRES_DB: sslmonitor_dev
      POSTGRES_USER: sslmonitor_user
      POSTGRES_PASSWORD: dev_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - sslmonitor-dev
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sslmonitor_user -d sslmonitor_dev"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache and Message Broker
  redis:
    image: redis:7-alpine
    container_name: sslmonitor-redis-dev
    ports:
      - "6379:6379"
    volumes:
      - redis_dev_data:/data
    networks:
      - sslmonitor-dev
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru

  # Backend API (FastAPI)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: sslmonitor-backend-dev
    environment:
      # Database Configuration
      DATABASE_URL: postgresql://sslmonitor_user:dev_password@postgres:5432/sslmonitor_dev
      REDIS_URL: redis://redis:6379/0
      
      # Security Configuration
      SECRET_KEY: dev-secret-key-change-in-production-min-32-characters
      JWT_SECRET_KEY: dev-jwt-secret-key-change-in-production-min-32-characters
      JWT_EXPIRE_MINUTES: 10080
      
      # Application Configuration
      FLASK_ENV: development
      DEBUG: "true"
      FRONTEND_URL: http://localhost:3000
      BACKEND_URL: http://localhost:8000
      
      # Email Configuration (Development)
      MAIL_SERVER: smtp.gmail.com
      MAIL_PORT: 587
      MAIL_USERNAME: your-email@gmail.com
      MAIL_PASSWORD: your-app-password
      MAIL_USE_TLS: "true"
      MAIL_FROM_ADDRESS: noreply@localhost
      MAIL_FROM_NAME: SSL Monitor Pro Dev
      
      # Stripe Configuration (Test Mode)
      STRIPE_SECRET_KEY: sk_test_your_stripe_secret_key_here
      STRIPE_PUBLISHABLE_KEY: pk_test_your_stripe_publishable_key_here
      STRIPE_WEBHOOK_SECRET: whsec_your_webhook_secret_here
      STRIPE_WEBHOOK_URL: http://localhost:8000/api/webhooks/stripe
      
      # Telegram Configuration (Development)
      TELEGRAM_BOT_TOKEN: 1234567890:ABCdefGHIjklMNOpqrsTUVwxyz
      TELEGRAM_CHAT_ID: 123456789
      
      # Monitoring Configuration
      DEFAULT_ALERT_THRESHOLD_DAYS: 30
      SSL_CHECK_INTERVAL_MINUTES: 60
      MAX_DOMAINS_FREE: 5
      MAX_DOMAINS_PAID: 100
      
      # Logging Configuration
      LOG_LEVEL: DEBUG
      ENABLE_REQUEST_LOGGING: "true"
      
      # Rate Limiting (Relaxed for Development)
      API_RATE_LIMIT: 1000
      SSL_CHECK_RATE_LIMIT: 100
      
      # Development Features
      ENABLE_DEV_FEATURES: "true"
      MOCK_EXTERNAL_SERVICES: "true"
      ENABLE_API_DOCS: "true"
      
      # CORS Configuration
      CORS_ORIGINS: http://localhost:3000,http://localhost:8080,http://localhost:5173
      CORS_ALLOW_CREDENTIALS: "true"
      
      # Feature Flags
      ENABLE_USER_REGISTRATION: "true"
      ENABLE_EMAIL_VERIFICATION: "false"
      ENABLE_2FA: "false"
      ENABLE_API_KEY_AUTH: "true"
      ENABLE_WEBHOOK_NOTIFICATIONS: "true"
      
      # Performance Configuration (Development)
      DB_POOL_SIZE: 5
      DB_CONNECTION_TIMEOUT: 30
      REDIS_POOL_SIZE: 5
      
      # Security Configuration (Relaxed for Development)
      ENABLE_CSRF_PROTECTION: "false"
      SESSION_TIMEOUT_MINUTES: 480
      ENABLE_BRUTE_FORCE_PROTECTION: "false"
      MAX_LOGIN_ATTEMPTS: 10
      ACCOUNT_LOCKOUT_DURATION: 1
      
      # Celery Configuration
      CELERY_BROKER_URL: redis://redis:6379/1
      CELERY_RESULT_BACKEND: redis://redis:6379/1
      CELERY_WORKER_CONCURRENCY: 2
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - /app/venv  # Exclude virtual environment
    networks:
      - sslmonitor-dev
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  # Celery Worker for Background Tasks
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: sslmonitor-celery-worker-dev
    environment:
      DATABASE_URL: postgresql://sslmonitor_user:dev_password@postgres:5432/sslmonitor_dev
      REDIS_URL: redis://redis:6379/0
      CELERY_BROKER_URL: redis://redis:6379/1
      CELERY_RESULT_BACKEND: redis://redis:6379/1
      CELERY_WORKER_CONCURRENCY: 2
      LOG_LEVEL: DEBUG
      MOCK_EXTERNAL_SERVICES: "true"
    volumes:
      - ./backend:/app
      - /app/venv  # Exclude virtual environment
    networks:
      - sslmonitor-dev
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    command: celery -A celery_worker worker --loglevel=info --concurrency=2

  # Celery Beat Scheduler
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: sslmonitor-celery-beat-dev
    environment:
      DATABASE_URL: postgresql://sslmonitor_user:dev_password@postgres:5432/sslmonitor_dev
      REDIS_URL: redis://redis:6379/0
      CELERY_BROKER_URL: redis://redis:6379/1
      CELERY_RESULT_BACKEND: redis://redis:6379/1
      LOG_LEVEL: DEBUG
      MOCK_EXTERNAL_SERVICES: "true"
    volumes:
      - ./backend:/app
      - /app/venv  # Exclude virtual environment
      - celery_beat_dev_data:/app/celerybeat-schedule
    networks:
      - sslmonitor-dev
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    command: celery -A celery_worker beat --loglevel=info

  # Frontend Development Server
  frontend:
    build:
      context: ./frontend-modern
      dockerfile: Dockerfile.dev
    container_name: sslmonitor-frontend-dev
    environment:
      NODE_ENV: development
      VITE_API_URL: http://localhost:8000
      VITE_FRONTEND_URL: http://localhost:3000
    ports:
      - "3000:3000"
    volumes:
      - ./frontend-modern:/app
      - /app/node_modules  # Exclude node_modules
    networks:
      - sslmonitor-dev
    restart: unless-stopped
    command: npm run dev -- --host 0.0.0.0

  # Nginx Reverse Proxy (Optional for Development)
  nginx:
    image: nginx:alpine
    container_name: sslmonitor-nginx-dev
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.dev.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - sslmonitor-dev
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    profiles:
      - nginx

  # Database Admin Tool (phpMyAdmin alternative for PostgreSQL)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: sslmonitor-pgadmin-dev
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@sslmonitor.local
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_dev_data:/var/lib/pgadmin
    networks:
      - sslmonitor-dev
    depends_on:
      - postgres
    restart: unless-stopped
    profiles:
      - tools

  # Redis Admin Tool
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: sslmonitor-redis-commander-dev
    environment:
      REDIS_HOSTS: local:redis:6379
      HTTP_USER: admin
      HTTP_PASSWORD: admin123
    ports:
      - "8081:8081"
    networks:
      - sslmonitor-dev
    depends_on:
      - redis
    restart: unless-stopped
    profiles:
      - tools

  # Mailhog for Email Testing
  mailhog:
    image: mailhog/mailhog:latest
    container_name: sslmonitor-mailhog-dev
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - sslmonitor-dev
    restart: unless-stopped
    profiles:
      - tools

volumes:
  postgres_dev_data:
    driver: local
  redis_dev_data:
    driver: local
  celery_beat_dev_data:
    driver: local
  pgadmin_dev_data:
    driver: local

networks:
  sslmonitor-dev:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
