#!/bin/bash

# SSL Monitor Pro - Cloudflare Tunnel Setup Script
# This script helps set up Cloudflare Tunnel for GitLab public access

echo "üåê SSL Monitor Pro - Cloudflare Tunnel Setup"
echo "============================================"
echo ""

# Configuration
DOMAIN="trustforge.uk"
SUBDOMAIN="gitlab"
GITLAB_IP="192.168.1.10"
GITLAB_PORT="80"

echo "üìã Configuration:"
echo "   Domain: $DOMAIN"
echo "   Subdomain: $SUBDOMAIN"
echo "   Full URL: https://$SUBDOMAIN.$DOMAIN"
echo "   GitLab: $GITLAB_IP:$GITLAB_PORT"
echo ""

# Function to check if cloudflared is installed
check_cloudflared() {
    echo "üîç Checking if cloudflared is installed..."
    
    if command -v cloudflared >/dev/null 2>&1; then
        echo "‚úÖ cloudflared is already installed"
        cloudflared --version
        return 0
    else
        echo "‚ùå cloudflared is not installed"
        return 1
    fi
}

# Function to install cloudflared
install_cloudflared() {
    echo "üì¶ Installing cloudflared..."
    
    # Detect OS
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        echo "   Detected Linux system"
        
        # Check if it's Ubuntu/Debian
        if command -v apt >/dev/null 2>&1; then
            echo "   Installing via apt..."
            curl -L --output cloudflared.deb https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb
            sudo dpkg -i cloudflared.deb
            rm cloudflared.deb
        # Check if it's CentOS/RHEL
        elif command -v yum >/dev/null 2>&1; then
            echo "   Installing via yum..."
            sudo yum install -y cloudflared
        # Check if snap is available
        elif command -v snap >/dev/null 2>&1; then
            echo "   Installing via snap..."
            sudo snap install cloudflared
        else
            echo "   Installing manually..."
            wget -O cloudflared https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64
            chmod +x cloudflared
            sudo mv cloudflared /usr/local/bin/
        fi
    else
        echo "‚ùå Unsupported OS: $OSTYPE"
        echo "   Please install cloudflared manually"
        return 1
    fi
    
    if check_cloudflared; then
        echo "‚úÖ cloudflared installed successfully"
        return 0
    else
        echo "‚ùå Failed to install cloudflared"
        return 1
    fi
}

# Function to check GitLab accessibility
check_gitlab_local() {
    echo "üîç Checking GitLab local accessibility..."
    
    if curl -s --connect-timeout 5 "http://$GITLAB_IP:$GITLAB_PORT" >/dev/null 2>&1; then
        echo "‚úÖ GitLab is accessible locally at http://$GITLAB_IP:$GITLAB_PORT"
        return 0
    else
        echo "‚ùå GitLab is not accessible locally"
        echo "   Please check if GitLab is running"
        return 1
    fi
}

# Function to create tunnel configuration
create_tunnel_config() {
    echo "üìù Creating tunnel configuration..."
    
    cat > tunnel-config.yml << EOF
tunnel: gitlab-tunnel
credentials-file: /root/.cloudflared/$(uuidgen).json

ingress:
  - hostname: $SUBDOMAIN.$DOMAIN
    service: http://$GITLAB_IP:$GITLAB_PORT
  - service: http_status:404
EOF

    echo "‚úÖ Tunnel configuration created: tunnel-config.yml"
    echo ""
    echo "üìã Configuration content:"
    cat tunnel-config.yml
    echo ""
}

# Function to provide manual setup instructions
provide_manual_instructions() {
    echo "üìã Manual Cloudflare Tunnel Setup Instructions"
    echo "=============================================="
    echo ""
    echo "1Ô∏è‚É£ CLOUDFLARE DASHBOARD:"
    echo "   ‚Ä¢ Go to: https://dash.cloudflare.com/"
    echo "   ‚Ä¢ Select domain: $DOMAIN"
    echo "   ‚Ä¢ Go to: Zero Trust ‚Üí Access ‚Üí Tunnels"
    echo "   ‚Ä¢ Click: 'Create a tunnel'"
    echo "   ‚Ä¢ Name: gitlab-tunnel"
    echo ""
    echo "2Ô∏è‚É£ INSTALL CLOUDFLARED:"
    echo "   ‚Ä¢ Copy the installation command from Cloudflare"
    echo "   ‚Ä¢ Run it on this server ($GITLAB_IP)"
    echo ""
    echo "3Ô∏è‚É£ CONFIGURE TUNNEL:"
    echo "   ‚Ä¢ Copy the tunnel token from Cloudflare"
    echo "   ‚Ä¢ Run: cloudflared tunnel run --token [TOKEN]"
    echo ""
    echo "4Ô∏è‚É£ ADD PUBLIC HOSTNAME:"
    echo "   ‚Ä¢ In tunnel settings, add public hostname:"
    echo "   ‚Ä¢ Subdomain: $SUBDOMAIN"
    echo "   ‚Ä¢ Domain: $DOMAIN"
    echo "   ‚Ä¢ Service: http://$GITLAB_IP:$GITLAB_PORT"
    echo ""
    echo "5Ô∏è‚É£ TEST CONNECTION:"
    echo "   ‚Ä¢ curl -I https://$SUBDOMAIN.$DOMAIN"
    echo "   ‚Ä¢ Should return GitLab response"
    echo ""
    echo "6Ô∏è‚É£ UPDATE RENDER:"
    echo "   ‚Ä¢ Repository URL: https://$SUBDOMAIN.$DOMAIN/root/ssl-monitor-pro.git"
    echo ""
}

# Function to create test script
create_test_script() {
    echo "üìù Creating test script..."
    
    cat > test-tunnel.sh << EOF
#!/bin/bash
# Cloudflare Tunnel Test Script

echo "üîç Testing Cloudflare Tunnel..."
echo "Domain: $SUBDOMAIN.$DOMAIN"
echo "GitLab: $GITLAB_IP:$GITLAB_PORT"
echo ""

echo "1Ô∏è‚É£ Testing domain resolution:"
nslookup $SUBDOMAIN.$DOMAIN

echo ""
echo "2Ô∏è‚É£ Testing HTTPS access:"
curl -I https://$SUBDOMAIN.$DOMAIN 2>/dev/null | head -1 || echo "   ‚ùå HTTPS not accessible"

echo ""
echo "3Ô∏è‚É£ Testing GitLab repository:"
curl -I https://$SUBDOMAIN.$DOMAIN/root/ssl-monitor-pro.git 2>/dev/null | head -1 || echo "   ‚ùå Repository not accessible"

echo ""
echo "4Ô∏è‚É£ Testing GitLab main page:"
curl -s https://$SUBDOMAIN.$DOMAIN | head -5 || echo "   ‚ùå GitLab not accessible"

echo ""
echo "‚úÖ Test complete!"
EOF

    chmod +x test-tunnel.sh
    echo "   ‚úÖ Created test-tunnel.sh"
}

# Main execution
echo "1Ô∏è‚É£ Checking cloudflared installation..."
if ! check_cloudflared; then
    echo ""
    echo "2Ô∏è‚É£ Installing cloudflared..."
    if ! install_cloudflared; then
        echo ""
        echo "‚ùå Installation failed. Please install manually."
        provide_manual_instructions
        exit 1
    fi
fi

echo ""
echo "3Ô∏è‚É£ Checking GitLab local accessibility..."
if ! check_gitlab_local; then
    echo ""
    echo "‚ùå GitLab is not accessible locally"
    echo "   Please start GitLab first"
    exit 1
fi

echo ""
echo "4Ô∏è‚É£ Creating tunnel configuration..."
create_tunnel_config

echo ""
echo "5Ô∏è‚É£ Creating test script..."
create_test_script

echo ""
echo "6Ô∏è‚É£ Providing manual setup instructions..."
provide_manual_instructions

echo ""
echo "üéâ CLOUDFLARE TUNNEL SETUP COMPLETE!"
echo "===================================="
echo ""
echo "üìã NEXT STEPS:"
echo "   1. Follow manual instructions above"
echo "   2. Create tunnel in Cloudflare dashboard"
echo "   3. Install and run cloudflared with token"
echo "   4. Add public hostname"
echo "   5. Test: ./test-tunnel.sh"
echo "   6. Update Render with tunnel URL"
echo ""
echo "üîç FILES CREATED:"
echo "   ‚Ä¢ tunnel-config.yml (tunnel configuration)"
echo "   ‚Ä¢ test-tunnel.sh (test script)"
echo ""
echo "üìû SUPPORT:"
echo "   ‚Ä¢ Cloudflare docs: https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/"
echo "   ‚Ä¢ Tunnel troubleshooting: Check cloudflared logs"
