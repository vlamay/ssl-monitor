name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: sslmonitor_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
        pip install -r backend/requirements-dev.txt
    
    - name: Run linting
      run: |
        cd backend
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        black --check .
        isort --check-only .
    
    - name: Run security scan
      run: |
        cd backend
        bandit -r . -f json -o bandit-report.json || true
        safety check --json --output safety-report.json || true
    
    - name: Run tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/sslmonitor_test
        REDIS_URL: redis://localhost:6379
        SECRET_KEY: test-secret-key-for-ci
        TELEGRAM_BOT_TOKEN: test-token
        TELEGRAM_CHAT_ID: test-chat-id
        FLASK_ENV: testing
      run: |
        cd backend
        pytest --cov=app --cov-report=xml --cov-report=html --cov-report=term-missing
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  build:
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile.prod
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to Render (Staging)
      env:
        RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        RENDER_SERVICE_ID: ${{ secrets.RENDER_STAGING_SERVICE_ID }}
      run: |
        curl -X POST \
          -H "Authorization: Bearer $RENDER_API_KEY" \
          -H "Content-Type: application/json" \
          https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys
    
    - name: Wait for deployment
      run: |
        echo "Waiting for staging deployment to complete..."
        sleep 60
    
    - name: Run smoke tests on staging
      env:
        STAGING_URL: https://ssl-monitor-staging.onrender.com
      run: |
        # Test health endpoint
        curl -f $STAGING_URL/health || exit 1
        
        # Test readiness endpoint
        curl -f $STAGING_URL/ready || exit 1
        
        # Test metrics endpoint
        curl -f $STAGING_URL/metrics || exit 1
    
    - name: Send staging deployment notification
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow

  deploy-production:
    runs-on: ubuntu-latest
    needs: [build, deploy-staging]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to Render (Production)
      env:
        RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        RENDER_SERVICE_ID: ${{ secrets.RENDER_PRODUCTION_SERVICE_ID }}
      run: |
        # Trigger production deployment
        curl -X POST \
          -H "Authorization: Bearer $RENDER_API_KEY" \
          -H "Content-Type: application/json" \
          https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys
        
        echo "Production deployment triggered successfully"
    
    - name: Wait for deployment
      run: |
        echo "Waiting for production deployment to complete..."
        sleep 120
    
    - name: Run production health checks
      env:
        PRODUCTION_URL: https://ssl-monitor-api.onrender.com
      run: |
        # Test health endpoint
        curl -f $PRODUCTION_URL/health || exit 1
        
        # Test readiness endpoint
        curl -f $PRODUCTION_URL/ready || exit 1
        
        # Test metrics endpoint
        curl -f $PRODUCTION_URL/metrics || exit 1
        
        # Test API endpoints
        curl -f $PRODUCTION_URL/api/trial/test || exit 1
        
        # Test webhook endpoints
        curl -f $PRODUCTION_URL/billing/webhook/test || exit 1
        curl -f $PRODUCTION_URL/telegram/webhook/test || exit 1
    
    - name: Send production deployment notification
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
    
    - name: Send Telegram notification
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          MESSAGE="üöÄ SSL Monitor Pro deployed to production successfully! ‚úÖ"
        else
          MESSAGE="‚ùå SSL Monitor Pro production deployment failed!"
        fi
        
        curl -X POST \
          -H "Content-Type: application/json" \
          -d "{\"text\":\"$MESSAGE\"}" \
          ${{ secrets.TELEGRAM_WEBHOOK_URL }}

  rollback:
    runs-on: ubuntu-latest
    needs: deploy-production
    if: failure() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Rollback production deployment
      env:
        RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        RENDER_SERVICE_ID: ${{ secrets.RENDER_PRODUCTION_SERVICE_ID }}
      run: |
        # Get previous deployment
        PREVIOUS_DEPLOY=$(curl -H "Authorization: Bearer $RENDER_API_KEY" \
          https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys | \
          jq -r '.deploys[1].id')
        
        # Rollback to previous deployment
        curl -X POST \
          -H "Authorization: Bearer $RENDER_API_KEY" \
          -H "Content-Type: application/json" \
          https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys/$PREVIOUS_DEPLOY/rollback
        
        echo "Rollback triggered successfully"
    
    - name: Send rollback notification
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
    
    - name: Send Telegram rollback notification
      run: |
        curl -X POST \
          -H "Content-Type: application/json" \
          -d '{"text":"üîÑ SSL Monitor Pro production rollback initiated due to deployment failure"}' \
          ${{ secrets.TELEGRAM_WEBHOOK_URL }}

  notify:
    runs-on: ubuntu-latest
    needs: [deploy-production, rollback]
    if: always()
    
    steps:
    - name: Send final notification
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
        text: |
          CI/CD Pipeline completed for SSL Monitor Pro
          Branch: ${{ github.ref }}
          Commit: ${{ github.sha }}
          Status: ${{ job.status }}
